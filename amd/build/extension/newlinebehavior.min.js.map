{"version":3,"file":"newlinebehavior.min.js","sources":["../../src/extension/newlinebehavior.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_ibwidgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/**\n * @param {string | undefined} content\n * @returns {string}\n */\nexport function removeEmptyParagraphs(content) {\n    if (!content) {\n        return '';\n    }\n\n    // Quick regex optimization if no <script>, <pre>, or <code> tags exist\n    if (!/<(script|pre|code)[\\s>]/i.test(content)) {\n        return content.replace(/<p>\\s*<\\/p>/gi, '');\n    }\n\n    // Otherwise, use DOMParser for safety\n    try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(content, 'text/html');\n        doc.querySelectorAll('p').forEach(p => {\n            if (/^\\s*$/.test(p.innerHTML) && !p.closest('pre, code, script')) {\n                p.remove();\n            }\n        });\n        return doc.body.innerHTML;\n    } catch (err) {\n        // Fallback: regex (less safe)\n        return content.replace(/<p>\\s*<\\/p>/gi, '');\n    }\n}\n\n\n/**\n * @param {string | undefined} content\n * @param {string} [padWith]\n * @returns {string}\n */\nexport function padEmptyParagraphsWith(content, padWith = '<br>') {\n    if (!content) {\n        return '';\n    }\n\n    // Quick regex optimization only if content cannot contain comments, scripts, pre, code\n    if (!/[<](script|pre|code|!--)/i.test(content)) {\n        return content.replace(/<p>\\s*<\\/p>/gi, `<p>${padWith}</p>`);\n    }\n\n    try {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(content, 'text/html');\n\n        doc.querySelectorAll('p').forEach(p => {\n            if (p.closest('pre, code, script')) {\n                return;\n            }\n\n            // Consider paragraph empty if it contains only comments or whitespace text\n            const isEmpty = Array.from(p.childNodes).every(node => {\n                if (node.nodeType === Node.COMMENT_NODE) {\n                    return true;\n                }\n                if (node.nodeType === Node.TEXT_NODE) {\n                    return !node.textContent?.trim();\n                }\n                return false; // Any element (including <br>) counts as content\n            });\n\n            if (isEmpty) {\n                const comments = Array.from(p.childNodes)\n                    .filter(n => n.nodeType === Node.COMMENT_NODE)\n                    .map(n => {\n                        if (n.nodeType === Node.COMMENT_NODE) {\n                            // @ts-ignore\n                            return `<!--${n.data}-->`;\n                        }\n                        return '';\n                    })\n                    .join('');\n                p.innerHTML = `${padWith}${comments}`;\n            }\n        });\n\n        return doc.body.innerHTML;\n    } catch (err) {\n        // Fallback: regex (less safe)\n        return content.replace(/<p>\\s*<\\/p>/gi, `<p>${padWith}</p>`);\n    }\n}\n\n/**\n *\n * @param {import(\"../plugin\").TinyMCE} editor\n */\nexport function emulateAttoNewlineBehaviour(editor) {\n    // Monkey patch setContent to have control over empty lines\n    if (!editor._orgSetContent) {\n        editor._orgSetContent = editor.setContent;\n\n        editor.setContent = function(/** @type {string} */ content, /** @type {*} */ args) {\n            // Only process content for the first call\n            let processedContent = content;\n            try {\n                if (!args || args.format === 'html') {\n                    processedContent = removeEmptyParagraphs(content);\n                }\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn('setContent patch failed', err);\n            }\n            return editor._orgSetContent.call(this, processedContent, args);\n        };\n    }\n\n    if (!editor._orgGetContent) {\n        editor._orgGetContent = editor.getContent;\n\n        editor.getContent = function(/** @type {any} */ args) {\n            let content = editor._orgGetContent.call(this, args) || '';\n            try {\n                // Convert empty <p></p> to <p><br></p> for Atto compatibility\n                content = padEmptyParagraphsWith(content);\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn('getContent patch failed', err);\n            }\n            return content;\n        };\n    }\n}"],"names":["removeEmptyParagraphs","content","test","replace","doc","DOMParser","parseFromString","querySelectorAll","forEach","p","innerHTML","closest","remove","body","err","padEmptyParagraphsWith","padWith","Array","from","childNodes","every","node","nodeType","Node","COMMENT_NODE","TEXT_NODE","textContent","_node$textContent","trim","comments","filter","n","map","data","join","editor","_orgSetContent","setContent","args","processedContent","format","console","warn","call","this","_orgGetContent","getContent"],"mappings":";;;;;;;;SA0BgBA,sBAAsBC,aAC7BA,cACM,OAIN,2BAA2BC,KAAKD,gBAC1BA,QAAQE,QAAQ,gBAAiB,cAMlCC,KADS,IAAIC,WACAC,gBAAgBL,QAAS,oBAC5CG,IAAIG,iBAAiB,KAAKC,SAAQC,IAC1B,QAAQP,KAAKO,EAAEC,aAAeD,EAAEE,QAAQ,sBACxCF,EAAEG,YAGHR,IAAIS,KAAKH,UAClB,MAAOI,YAEEb,QAAQE,QAAQ,gBAAiB,cAUhCY,uBAAuBd,aAASe,+DAAU,WACjDf,cACM,OAIN,4BAA4BC,KAAKD,gBAC3BA,QAAQE,QAAQ,gBAAkB,MAAKa,yBAKxCZ,KADS,IAAIC,WACAC,gBAAgBL,QAAS,oBAE5CG,IAAIG,iBAAiB,KAAKC,SAAQC,OAC1BA,EAAEE,QAAQ,+BAKEM,MAAMC,KAAKT,EAAEU,YAAYC,OAAMC,cACvCA,KAAKC,WAAaC,KAAKC,cAGvBH,KAAKC,WAAaC,KAAKE,uCACfJ,KAAKK,0CAALC,kBAAkBC,iCAKrB,OACHC,SAAWZ,MAAMC,KAAKT,EAAEU,YACzBW,QAAOC,GAAKA,EAAET,WAAaC,KAAKC,eAChCQ,KAAID,GACGA,EAAET,WAAaC,KAAKC,aAEZ,UAAMO,EAAEE,aAEb,KAEVC,KAAK,IACVzB,EAAEC,UAAa,GAAEM,UAAUa,eAI5BzB,IAAIS,KAAKH,UAClB,MAAOI,YAEEb,QAAQE,QAAQ,gBAAkB,MAAKa,sHAQVmB,QAEnCA,OAAOC,iBACRD,OAAOC,eAAiBD,OAAOE,WAE/BF,OAAOE,WAAa,SAA+BpC,QAA0BqC,UAErEC,iBAAmBtC,YAEdqC,MAAwB,SAAhBA,KAAKE,SACdD,iBAAmBvC,sBAAsBC,UAE/C,MAAOa,KAEL2B,QAAQC,KAAK,0BAA2B5B,YAErCqB,OAAOC,eAAeO,KAAKC,KAAML,iBAAkBD,QAI7DH,OAAOU,iBACRV,OAAOU,eAAiBV,OAAOW,WAE/BX,OAAOW,WAAa,SAA4BR,UACxCrC,QAAUkC,OAAOU,eAAeF,KAAKC,KAAMN,OAAS,OAGpDrC,QAAUc,uBAAuBd,SACnC,MAAOa,KAEL2B,QAAQC,KAAK,0BAA2B5B,YAErCb"}